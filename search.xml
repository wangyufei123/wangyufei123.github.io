<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Activiti6.0工作流引擎学习(二) -- 引擎配置</title>
    <url>/posts/1d8f65f1.html</url>
    <content><![CDATA[<h1 id="Activiti6-0工作流引擎学习-二-–-引擎配置"><a href="#Activiti6-0工作流引擎学习-二-–-引擎配置" class="headerlink" title="Activiti6.0工作流引擎学习(二) – 引擎配置"></a>Activiti6.0工作流引擎学习(二) – 引擎配置</h1><h2 id="1-Activiti流程引擎配置涉及的类"><a href="#1-Activiti流程引擎配置涉及的类" class="headerlink" title="1.Activiti流程引擎配置涉及的类"></a>1.Activiti流程引擎配置涉及的类</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf6rcr6dzaj31b40nw4bp.jpg" alt="Activiti流程引擎配置"></p>
<h3 id="1-1-流程引擎配置类的作用"><a href="#1-1-流程引擎配置类的作用" class="headerlink" title="1.1 流程引擎配置类的作用"></a>1.1 流程引擎配置类的作用</h3><ol>
<li>ProcessEngineConfiguration<ul>
<li>查找并解析xml配置文件activiti.cfg.xml</li>
<li>提供多个静态方法创建配置对象<br>  <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf6rna78thj310407mwsc.jpg" alt="静态方法创建配置对象"></li>
<li>实现几个基于不同场景场景的子类，配置方式非常的灵活<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf6ry2ub4qj318808oat3.jpg" alt="使用场景"></li>
</ul>
</li>
</ol>
<h3 id="1-2-部分子类的使用"><a href="#1-2-部分子类的使用" class="headerlink" title="1.2 部分子类的使用"></a>1.2 部分子类的使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfig1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//通过默认来创建引擎；会通过spring的解析进行创建引擎对象</span></span><br><span class="line">        ProcessEngineConfiguration engine</span><br><span class="line">                = ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();</span><br><span class="line">        log.info(<span class="string">"engine =&#123;&#125;"</span>,engine);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfig2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//直接创建标准的引擎，直接new一个引擎对象</span></span><br><span class="line">        ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();</span><br><span class="line">        log.info(<span class="string">"configuration = &#123;&#125;"</span>,configuration);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-数据库配置"><a href="#2-数据库配置" class="headerlink" title="2.数据库配置"></a>2.数据库配置</h2><h3 id="2-1-缺省配置默认，使用H2内存数据库"><a href="#2-1-缺省配置默认，使用H2内存数据库" class="headerlink" title="2.1 缺省配置默认，使用H2内存数据库"></a>2.1 缺省配置默认，使用H2内存数据库</h3><h3 id="2-2-配置JDBC属性，使用mybatis提供的链接池"><a href="#2-2-配置JDBC属性，使用mybatis提供的链接池" class="headerlink" title="2.2 配置JDBC属性，使用mybatis提供的链接池"></a>2.2 配置JDBC属性，使用mybatis提供的链接池</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf6trk2he0j315o0bydor.jpg" alt=""></p>
<h3 id="2-3-配置DataSource，可自选第三方实现"><a href="#2-3-配置DataSource，可自选第三方实现" class="headerlink" title="2.3 配置DataSource，可自选第三方实现"></a>2.3 配置DataSource，可自选第三方实现</h3><ol>
<li>Druid 为监控而生的数据库连接池 来自阿里<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf6tzwnzmgj31a806awm5.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf6u1fe54sj319o0c417z.jpg" alt=""></li>
<li>Dbcp 老牌数据源连接池，稳定可靠，Tomcat自带</li>
<li>HikariCP 来自日本的极速数据源连接池，Spring默选</li>
</ol>
<h3 id="2-4-数据库更新策略"><a href="#2-4-数据库更新策略" class="headerlink" title="2.4 数据库更新策略"></a>2.4 数据库更新策略</h3><ol>
<li>配置databaseSchemaUpdate<ul>
<li>false：启动时检查数据库版本，发生不匹配抛异常</li>
<li>true: 启动时自动检查并甭信数据库表，不存在会创建</li>
<li>create-drop: 启动时创建数据库表结构，结束时删除表结构</li>
</ul>
</li>
</ol>
<h3 id="2-5-数据库配置编码"><a href="#2-5-数据库配置编码" class="headerlink" title="2.5 数据库配置编码"></a>2.5 数据库配置编码</h3><h4 id="2-5-1-使用默认的配置文件创建流程引擎"><a href="#2-5-1-使用默认的配置文件创建流程引擎" class="headerlink" title="2.5.1 使用默认的配置文件创建流程引擎"></a>2.5.1 使用默认的配置文件创建流程引擎</h4><p><code>activiti.cfg.xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="jdbcUrl" value="jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jdbcDriver" value="org.h2.Driver" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jdbcUsername" value="sa" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jdbcPassword" value="" /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &amp;lt;!&amp;ndash; Database configurations &amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="databaseSchemaUpdate" value="drop-create" /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;property name="history" value="full" /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ProcessEngineConfiguration configuration =</span><br><span class="line">               ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();</span><br><span class="line">       log.info(<span class="string">"configuration = &#123;&#125;"</span>,configuration);</span><br><span class="line">       ProcessEngine processEngine = configuration.buildProcessEngine();</span><br><span class="line">       log.info(<span class="string">"获取流程引擎 = [&#123;&#125;]"</span>,processEngine.getName());</span><br><span class="line">       processEngine.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-5-2-使用druid数据源"><a href="#2-5-2-使用druid数据源" class="headerlink" title="2.5.2 使用druid数据源"></a>2.5.2 使用druid数据源</h4><p>activiti_druid.cfg.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="jdbcUrl" value="jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jdbcDriver" value="org.h2.Driver" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jdbcUsername" value="sa" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="jdbcPassword" value="" /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &amp;lt;!&amp;ndash; Database configurations &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"drop-create"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"history"</span> <span class="attr">value</span>=<span class="string">"full"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引擎是否使用历史数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbHistoryUsed"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引擎是否使用身份验证--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbIdentityUsed"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://111.229.203.5:3306/activiti?serverTimezone=CTT<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>allowMultiQueries=true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"weaver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"192612"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat,slf4j"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ProcessEngineConfiguration configuration =</span><br><span class="line">                ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(<span class="string">"activiti_druid.cfg.xml"</span>);</span><br><span class="line">        log.info(<span class="string">"configuration = &#123;&#125;"</span>,configuration);</span><br><span class="line">        ProcessEngine processEngine = configuration.buildProcessEngine();</span><br><span class="line">        log.info(<span class="string">"获取流程引擎 = [&#123;&#125;]"</span>,processEngine.getName());</span><br><span class="line">        processEngine.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-日志记录配置"><a href="#3-日志记录配置" class="headerlink" title="3.日志记录配置"></a>3.日志记录配置</h2><h3 id="3-1-日志组件的关系及MDC"><a href="#3-1-日志组件的关系及MDC" class="headerlink" title="3.1 日志组件的关系及MDC"></a>3.1 日志组件的关系及MDC</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf6z7p2plmj311o0ps194.jpg" alt=""></p>
<h4 id="3-1-1-配置开启MDC-Mapped-Diagnostic-Contexts"><a href="#3-1-1-配置开启MDC-Mapped-Diagnostic-Contexts" class="headerlink" title="3.1.1 配置开启MDC(Mapped Diagnostic Contexts)"></a>3.1.1 配置开启MDC(Mapped Diagnostic Contexts)</h4><ol>
<li>默认没有开启，需要手动设置<code>LogMDC.setMDCEnable(true)</code></li>
<li>配置logback.xml日志模版 <code>%X{mdcProcessInstanceID}</code></li>
<li>流程只有在执行过程出现异常才会记录MDC信息</li>
</ol>
<h3 id="3-2-配置历史记录级别-HistoryLevel"><a href="#3-2-配置历史记录级别-HistoryLevel" class="headerlink" title="3.2 配置历史记录级别(HistoryLevel)"></a>3.2 配置历史记录级别(HistoryLevel)</h3><h4 id="3-2-1-配置HistoryLevel"><a href="#3-2-1-配置HistoryLevel" class="headerlink" title="3.2.1 配置HistoryLevel"></a>3.2.1 配置HistoryLevel</h4><ol>
<li>none:不记录历史流程，性能高，流程结束后不可读取</li>
<li>activiti:归档流程实例和活动实例，流程变量不同步</li>
<li>addit:默认值，在activiti基础上同步变量值，保存表单属性</li>
<li>full:性能较差，记录所有实例和变量细节变化</li>
</ol>
<h3 id="3-3-配置基于db的事件日志-Event-logging"><a href="#3-3-配置基于db的事件日志-Event-logging" class="headerlink" title="3.3 配置基于db的事件日志(Event logging)"></a>3.3 配置基于db的事件日志(Event logging)</h3><h4 id="3-3-1-配置Event-Logging"><a href="#3-3-1-配置Event-Logging" class="headerlink" title="3.3.1 配置Event Logging"></a>3.3.1 配置Event Logging</h4><ol>
<li>试验性的事件记录机制，性能影响较大</li>
<li>开启默认记录所有数据的变化过程，表记录快速增长</li>
<li>日志内容json格式，建议存入mongoDB、Elastic Search</li>
</ol>
<h3 id="3-4-日志记录-mdc"><a href="#3-4-日志记录-mdc" class="headerlink" title="3.4 日志记录 mdc"></a>3.4 日志记录 mdc</h3><h2 id="4-历史记录配置"><a href="#4-历史记录配置" class="headerlink" title="4 历史记录配置"></a>4 历史记录配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.history.HistoricActivityInstance;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.history.HistoricDetail;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.runtime.Execution;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.task.Task;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.test.ActivitiRule;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.test.Deployment;</span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: activiti6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 测试MDC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-14-31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMDC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(TestMDC<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//定义流程文件部署</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; params = Maps.newHashMap();</span><br><span class="line">        params.put(<span class="string">"keyStart1"</span>,<span class="string">"value1"</span>);</span><br><span class="line">        params.put(<span class="string">"keyStart2"</span>,<span class="string">"value2"</span>);</span><br><span class="line">        <span class="comment">//启动流程</span></span><br><span class="line">        ProcessInstance processInstance =</span><br><span class="line">                activitiRule.getRuntimeService().startProcessInstanceByKey(<span class="string">"my-process"</span>,params);</span><br><span class="line">        <span class="comment">//修改变量</span></span><br><span class="line">        List&lt;Execution&gt; executions = activitiRule.getRuntimeService().createExecutionQuery().listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (Execution execution : executions) &#123;</span><br><span class="line">            log.info(<span class="string">"executions &#123;&#125;"</span>,executions);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"executions size = &#123;&#125;"</span>,executions.size());</span><br><span class="line">        String id = executions.iterator().next().getId();</span><br><span class="line">        activitiRule.getRuntimeService().setVariable(id,<span class="string">"keyStart1"</span>,<span class="string">"value1_"</span>);</span><br><span class="line">                <span class="comment">//提交表单task 修改变量</span></span><br><span class="line">        Task task = activitiRule.getTaskService().createTaskQuery().singleResult();</span><br><span class="line">        Map&lt;String,String&gt; properties = Maps.newHashMap();</span><br><span class="line">        properties.put(<span class="string">"formkey1"</span>,<span class="string">"valuef1"</span>);</span><br><span class="line">        properties.put(<span class="string">"formkey2"</span>,<span class="string">"valuef2"</span>);</span><br><span class="line">        activitiRule.getFormService().submitTaskFormData(task.getId(),properties);</span><br><span class="line">        <span class="comment">//activitiRule.getTaskService().complete(task.getId());</span></span><br><span class="line">        <span class="comment">//输出历史活动</span></span><br><span class="line">        List&lt;HistoricActivityInstance&gt; historicActivityInstances = activitiRule.getHistoryService().createHistoricActivityInstanceQuery().listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (HistoricActivityInstance historicActivityInstance : historicActivityInstances) &#123;</span><br><span class="line">            log.info(<span class="string">"historicActivityInstances = &#123;&#125;"</span>,historicActivityInstances);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"historicActivityInstances size = &#123;&#125;"</span>,historicActivityInstances.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出历史表单</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出历史详情</span></span><br><span class="line">        List&lt;HistoricDetail&gt; historicDetails = activitiRule.getHistoryService().createHistoricDetailQuery().listPage(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (HistoricDetail historicDetail : historicDetails) &#123;</span><br><span class="line">            log.info(<span class="string">"historicDetail [&#123;&#125;]"</span>,historicDetail);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"historicDetail size = [&#123;&#125;]"</span>, historicDetails.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-事件处理及监听配置-eventlog"><a href="#5-事件处理及监听配置-eventlog" class="headerlink" title="5.事件处理及监听配置-eventlog"></a>5.事件处理及监听配置-eventlog</h2><h3 id="5-1-事件及监听器原理"><a href="#5-1-事件及监听器原理" class="headerlink" title="5.1 事件及监听器原理"></a>5.1 事件及监听器原理</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf7zqvwqsnj31js0fmq5s.jpg" alt=""></p>
<h3 id="5-2-监听器的配置方式"><a href="#5-2-监听器的配置方式" class="headerlink" title="5.2 监听器的配置方式"></a>5.2 监听器的配置方式</h3><ol>
<li>配置Listener<ol>
<li>eventListeners:监听所有事件派发通知</li>
<li>typedEventListeners:监听指定事件类型的通知</li>
<li>activiti:eventListener:只监听特定流程定义的事件<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf7zr4t5btj31jo0hytck.jpg" alt=""></li>
</ol>
</li>
</ol>
<h3 id="5-3-Activiti事件监听"><a href="#5-3-Activiti事件监听" class="headerlink" title="5.3 Activiti事件监听"></a>5.3 Activiti事件监听</h3><h4 id="5-3-1-相关API"><a href="#5-3-1-相关API" class="headerlink" title="5.3.1 相关API"></a>5.3.1 相关API</h4><ul>
<li>ActivitiEvent:事件对象</li>
<li>ActivitiEventListener:监听器</li>
<li>ActivitiEventType:事件类型</li>
</ul>
<h3 id="5-4-ActivitiEventListener监听器的使用"><a href="#5-4-ActivitiEventListener监听器的使用" class="headerlink" title="5.4 ActivitiEventListener监听器的使用"></a>5.4 ActivitiEventListener监听器的使用</h3><ol>
<li>配置文件中增加对应的配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事件监听器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"eventListeners"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--监听器的实现类--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.atguigu.event.ProcessEventListener"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建一个实体类，实现<code>ActivitiEventListener</code>类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.bpmn.model.ActivitiListener;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.delegate.event.ActivitiEvent;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.delegate.event.ActivitiEventListener;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.delegate.event.ActivitiEventType;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: activiti6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 流程监听</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-27-21-26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessEventListener</span> <span class="keyword">implements</span> <span class="title">ActivitiEventListener</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(ProcessEventListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(ActivitiEvent event)</span> </span>&#123;</span><br><span class="line">        ActivitiEventType type = event.getType();</span><br><span class="line">        <span class="comment">//判断是是否为流程启动</span></span><br><span class="line">        <span class="keyword">if</span>(ActivitiEventType.PROCESS_STARTED.equals(type))&#123;</span><br><span class="line">            log.info(<span class="string">"流程启动 &#123;&#125;"</span>,event.getProcessInstanceId());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ActivitiEventType.PROCESS_COMPLETED.equals(type))&#123;</span><br><span class="line">            log.info(<span class="string">"流程结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFailOnException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-5-TypedEventListeners监听器的使用"><a href="#5-5-TypedEventListeners监听器的使用" class="headerlink" title="5.5 TypedEventListeners监听器的使用"></a>5.5 TypedEventListeners监听器的使用</h3><ol>
<li>配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typedEventListeners"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这样配置的时候，只会监听流程启动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"PROCESS_STARTED"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.atguigu.event.ProcessEventListener"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>流程监听实体类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.bpmn.model.ActivitiListener;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.delegate.event.ActivitiEvent;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.delegate.event.ActivitiEventListener;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.delegate.event.ActivitiEventType;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: activiti6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 流程监听</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-27-21-26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessEventListener</span> <span class="keyword">implements</span> <span class="title">ActivitiEventListener</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(ProcessEventListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(ActivitiEvent event)</span> </span>&#123;</span><br><span class="line">        ActivitiEventType type = event.getType();</span><br><span class="line">        <span class="comment">//判断是是否为流程启动</span></span><br><span class="line">        <span class="keyword">if</span>(ActivitiEventType.PROCESS_STARTED.equals(type))&#123;</span><br><span class="line">            log.info(<span class="string">"流程启动 &#123;&#125;"</span>,event.getProcessInstanceId());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ActivitiEventType.PROCESS_COMPLETED.equals(type))&#123;</span><br><span class="line">            log.info(<span class="string">"流程结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFailOnException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出的结果为：22:18:38.450 [main] [INFO ]流程启动 4  c.a.e.ProcessEventListener.onEvent:23</span></span><br></pre></td></tr></table></figure>
<h2 id="6-命令拦截器配置–command"><a href="#6-命令拦截器配置–command" class="headerlink" title="6. 命令拦截器配置–command"></a>6. 命令拦截器配置–command</h2><h3 id="6-1-命令模式与责任链模式"><a href="#6-1-命令模式与责任链模式" class="headerlink" title="6.1 命令模式与责任链模式"></a>6.1 命令模式与责任链模式</h3><h4 id="6-1-1-命令模式"><a href="#6-1-1-命令模式" class="headerlink" title="6.1.1 命令模式"></a>6.1.1 命令模式</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf7dv4a99yj31dk0qy4bt.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf7dx177oaj319e0qo16v.jpg" alt="时序图"></p>
<h4 id="6-1-2-责任链模式"><a href="#6-1-2-责任链模式" class="headerlink" title="6.1.2 责任链模式"></a>6.1.2 责任链模式</h4><ul>
<li>CommandInterceptor<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf7dzxamvhj31fk0ca7ba.jpg" alt=""></li>
<li>配置Interceptor<ul>
<li>customPreCommandInterceptors:配置在默认拦截器之前</li>
<li>customPostCommandInterceptors:配置在默认拦截器之后</li>
<li>commandInvoker:配置最后的执行器</li>
</ul>
</li>
</ul>
<h3 id="6-2-拦截器的配置方式"><a href="#6-2-拦截器的配置方式" class="headerlink" title="6.2 拦截器的配置方式"></a>6.2 拦截器的配置方式</h3><ol>
<li>activiti.cfg.xml文件的修改</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截器的配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customPreCommandInterceptors"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.atguigu.interceptor.DurationInterceptor"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>实体类的编写</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.interceptor.AbstractCommandInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.interceptor.Command;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.interceptor.CommandConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: activiti6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 执行的时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-27-22-53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DurationInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractCommandInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(CommandConfig config, Command&lt;T&gt; command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">this</span>.getNext().execute(config,command);</span><br><span class="line">        <span class="keyword">long</span> l1 = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> duration = l1 - l;</span><br><span class="line">        System.out.println(<span class="string">"执行的时长-----&gt;"</span>+duration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-3-Activiti的拦截器"><a href="#6-3-Activiti的拦截器" class="headerlink" title="6.3 Activiti的拦截器"></a>6.3 Activiti的拦截器</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf7e7154rqj30xw0dekfa.jpg" alt=""></p>
<h2 id="7-作业执行器-Job-Executor"><a href="#7-作业执行器-Job-Executor" class="headerlink" title="7. 作业执行器 Job Executor"></a>7. 作业执行器 Job Executor</h2><h3 id="7-1-作业执行器配置"><a href="#7-1-作业执行器配置" class="headerlink" title="7.1 作业执行器配置"></a>7.1 作业执行器配置</h3><p>（1） asyncExecutorActivate:激活作业执行器<br>（2） asyncExectuorXXX:异步执行器的属性配置<br>（3） asyncExecutor:异步执行器的bean</p>
<h3 id="7-2-配置自定义线程池"><a href="#7-2-配置自定义线程池" class="headerlink" title="7.2 配置自定义线程池"></a>7.2 配置自定义线程池</h3><h4 id="7-2-1-自定义线程池ExecutorService"><a href="#7-2-1-自定义线程池ExecutorService" class="headerlink" title="7.2.1 自定义线程池ExecutorService"></a>7.2.1 自定义线程池ExecutorService</h4><p>（1） corePoolSize:核心线程数<br>（2） maxPoolSize: 最大线程数<br>（3） queueCapacity:堵塞队列大小</p>
<h4 id="7-2-2-基于spring线程池的配置"><a href="#7-2-2-基于spring线程池的配置" class="headerlink" title="7.2.2 基于spring线程池的配置"></a>7.2.2 基于spring线程池的配置</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gf7wkem35qj31580ben91.jpg" alt=""></p>
<h3 id="7-3-流程定义定时启动流程"><a href="#7-3-流程定义定时启动流程" class="headerlink" title="7.3 流程定义定时启动流程"></a>7.3 流程定义定时启动流程</h3><h4 id="7-3-1-定时开始事件"><a href="#7-3-1-定时开始事件" class="headerlink" title="7.3.1 定时开始事件"></a>7.3.1 定时开始事件</h4><ol>
<li>timeDate：指定启动时间</li>
<li>timeDuration:指定持续时间间隔后执行</li>
<li>timeCycle:R5/P1DT1H指定事件段后周期执行</li>
</ol>
<h3 id="7-4-配置文件修改"><a href="#7-4-配置文件修改" class="headerlink" title="7.4 配置文件修改"></a>7.4 配置文件修改</h3><p>activiti.cfg.xml文件修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;processEngineConfiguration&quot;</span><br><span class="line">          class&#x3D;&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;</span><br><span class="line">        &lt;!--打开定时任务的激活器--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;asyncExecutorActivate&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--定义异步执行器--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;asyncExecutor&quot; ref&#x3D;&quot;defaultAsyncJobExecutor&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--系统默认的自定义任务执行器--&gt;</span><br><span class="line">    &lt;bean id &#x3D; &quot;defaultAsyncJobExecutor&quot; class&#x3D;&quot;org.activiti.engine.impl.asyncexecutor.DefaultAsyncJobExecutor&quot;&gt;</span><br><span class="line">        &lt;!--需要的服务--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;executorService&quot; ref&#x3D;&quot;executorService&quot;&#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--使用spring的线程池--&gt;</span><br><span class="line">    &lt;bean id &#x3D; &quot;executorService&quot; class&#x3D;&quot;org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean&quot;&gt;</span><br><span class="line">    &lt;!--具体的配置--&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<h2 id="8-Activiti与Spring的集成"><a href="#8-Activiti与Spring的集成" class="headerlink" title="8 Activiti与Spring的集成"></a>8 Activiti与Spring的集成</h2><h3 id="8-1-集成Spring配置"><a href="#8-1-集成Spring配置" class="headerlink" title="8.1 集成Spring配置"></a>8.1 集成Spring配置</h3><h4 id="8-1-1-相关配置"><a href="#8-1-1-相关配置" class="headerlink" title="8.1.1 相关配置"></a>8.1.1 相关配置</h4><p>(1) 添加pom依赖activiti-spring</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.activiti&#x2F;activiti-spring --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.activiti&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activiti-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.0.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>(2) 基于Spring的默认配置activiti-context.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans   http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line">&lt;!--数据源配置--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;111.229.203.5:3306&#x2F;activiti?serverTimezone&#x3D;CTT&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;allowMultiQueries&#x3D;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;weaver&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;192612&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;initialSize&quot; value&#x3D;&quot;1&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;maxActive&quot; value&#x3D;&quot;10&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;filters&quot; value&#x3D;&quot;stat,slf4j&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--事务管理器配置--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSourceTransactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;!--指定数据源--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;processEngineConfiguration&quot;</span><br><span class="line">          class&#x3D;&quot;org.activiti.spring.SpringProcessEngineConfiguration&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--配置事务管理--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;transactionManager&quot; ref&#x3D;&quot;dataSourceTransactionManager&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--数据源的创建格式--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;databaseSchemaUpdate&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--构造流程引擎对象--&gt;</span><br><span class="line">    &lt;bean id &#x3D; &quot;processEngineFactoryBean&quot; class&#x3D;&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--指定流程配置对象--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;processEngineConfiguration&quot; ref&#x3D;&quot;processEngineConfiguration&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;!--报漏服务给Spring--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;runtimeService&quot; factory-bean&#x3D;&quot;processEngineFactoryBean&quot; factory-method&#x3D;&quot;getRuntimeService&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;repositoryService&quot; factory-bean&#x3D;&quot;processEngineFactoryBean&quot; factory-method&#x3D;&quot;getRepositoryService&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;formService&quot; factory-bean&#x3D;&quot;processEngineFactoryBean&quot; factory-method&#x3D;&quot;getFormService&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;taskService&quot; factory-bean&#x3D;&quot;processEngineFactoryBean&quot; factory-method&#x3D;&quot;getTaskService&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;historyService&quot; factory-bean&#x3D;&quot;processEngineFactoryBean&quot; factory-method&#x3D;&quot;getHistoryService&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;activitiRule&quot; class&#x3D;&quot;org.activiti.engine.test.ActivitiRule&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;processEngine&quot; ref&#x3D;&quot;processEngineFactoryBean&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<p>(3) Activiti核心服务注入Spring容器<br><strong><em>详细配置见上一步</em></strong></p>
<h3 id="8-2-基于Spring对Activiti管理"><a href="#8-2-基于Spring对Activiti管理" class="headerlink" title="8.2 基于Spring对Activiti管理"></a>8.2 基于Spring对Activiti管理</h3><h4 id="8-2-1-功能特征"><a href="#8-2-1-功能特征" class="headerlink" title="8.2.1 功能特征"></a>8.2.1 功能特征</h4><p>(1) 集成Spring事务管理器<br>(2) 定义文件表达式中使用Spring bean<br>(3) 自动部署资源文件</p>
<h3 id="8-3-基于Spring的流程单元测试"><a href="#8-3-基于Spring的流程单元测试" class="headerlink" title="8.3 基于Spring的流程单元测试"></a>8.3 基于Spring的流程单元测试</h3><h4 id="8-3-1-单元测试"><a href="#8-3-1-单元测试" class="headerlink" title="8.3.1 单元测试"></a>8.3.1 单元测试</h4><p>（1） 添加pom依赖spring-test</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-test --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.2.5.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>（2） 辅助测试Rule:ActivitiRule</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.RuntimeService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.TaskService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.task.Task;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.test.ActivitiRule;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.test.Deployment;</span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: activiti6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 测试与Spring的集成</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Wang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-28-10-26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= &#123;<span class="string">"classpath:activiti-context.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(TestSpring<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> ActivitiRule activitiRule;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment</span>(resources = &#123;<span class="string">"my-process.bpmn20.xml"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">        <span class="comment">/*List&lt;Task&gt; tasks = taskService.createTaskQuery().listPage(0, 100);</span></span><br><span class="line"><span class="comment">        for (Task task : tasks) &#123;</span></span><br><span class="line"><span class="comment">            log.info("task 的某些测试数据 &#123;&#125;",task);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3） 辅助测试TestCase:SpringActivitiTestCase</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>activiti6.0</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA中查看maven的依赖关系</title>
    <url>/posts/c9331070.html</url>
    <content><![CDATA[<h2 id="1-使用maven自带的工具"><a href="#1-使用maven自带的工具" class="headerlink" title="1. 使用maven自带的工具"></a>1. 使用maven自带的工具</h2><h3 id="1-1-确保idea中UML的插件可以使用"><a href="#1-1-确保idea中UML的插件可以使用" class="headerlink" title="1.1 确保idea中UML的插件可以使用"></a>1.1 确保idea中UML的插件可以使用</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfhb2uvgs8j314r0u0afz.jpg" alt=""></p>
<h3 id="1-2-pom-xml文件依赖分析"><a href="#1-2-pom-xml文件依赖分析" class="headerlink" title="1.2 pom.xml文件依赖分析"></a>1.2 pom.xml文件依赖分析</h3><ol>
<li>在需要分析的pom.xml文件中右键选择<code>maven</code>-&gt;<code>Show Dependencies</code><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfhb5cwrgej30u00zyx6f.jpg" alt=""><br>打开后的图形<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfhbae8o9oj315c0u04qr.jpg" alt=""></li>
<li>使用技巧<ul>
<li>按住<code>option</code>,移动鼠标会出现放大镜,放大当前的依赖</li>
<li>按住<code>control</code>,滚轮向前 放大整个屏幕</li>
<li>红色实现表示冲突的文件,右键，排除，他就自动在pom文件里面给exclud啦</li>
<li>红色的虚线表示用一个jar包都在哪里被多次引用</li>
</ul>
</li>
</ol>
<h2 id="2-使用maven-helper插件"><a href="#2-使用maven-helper插件" class="headerlink" title="2. 使用maven helper插件"></a>2. 使用maven helper插件</h2><ol>
<li><p>打开需要查看的pom.xml文件,下边会出现<code>Denpendency Anlyzar</code>，点击按钮<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfhbmhob3ij31cm0u01l1.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfhbnq116yj31fk0u0hdw.jpg" alt=""></p>
</li>
<li><p>菜单功能</p>
<ul>
<li>Conflicts：冲突</li>
<li>All Dependencies as List：列表形式查看所有依赖</li>
<li>All Dependencies as Tree：树结构查看所有依赖</li>
</ul>
</li>
<li><p>冲突jar包的解决<br> 切换到maven 依赖视图选择冲突选项，如果有冲突，在左下面区域会有红色显示。<br> 解决冲突，右键单击红色区域，弹出菜单选择Exclude命令，对冲突进行排除<br> <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfhcdt8upij316c0u0qv7.jpg" alt=""></p>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8日期和时间处理</title>
    <url>/posts/58f1702a.html</url>
    <content><![CDATA[<h2 id="1-java8新特性-新时间与日期API本地时间与时间戳"><a href="#1-java8新特性-新时间与日期API本地时间与时间戳" class="headerlink" title="1.java8新特性-新时间与日期API本地时间与时间戳"></a>1.java8新特性-新时间与日期API本地时间与时间戳</h2><p><code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>类的实例是不可变的对象，分别表示使用ISO-8601的日历系统的日期、时间、日期和时间。新的API提供了简单的日期和时间的获取方法。不包含与时区有关的信息</p>
<h3 id="1-1-使用静态方法now获取本地时间"><a href="#1-1-使用静态方法now获取本地时间" class="headerlink" title="1.1 使用静态方法now获取本地时间"></a>1.1 使用静态方法now获取本地时间</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">"获取系统的日期:"</span>+now);<span class="comment">// 2020-05-25</span></span><br><span class="line">LocalTime localTime = LocalTime.now();</span><br><span class="line">System.out.println(<span class="string">"获取系统的时间:"</span>+localTime);<span class="comment">//20:32:55.091</span></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">System.out.println(<span class="string">"获取系统的日期和时间:"</span>+localDateTime);<span class="comment">//2020-05-25T20:32:55.092</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-使用静态方法of获取日期和时间"><a href="#1-2-使用静态方法of获取日期和时间" class="headerlink" title="1.2 使用静态方法of获取日期和时间"></a>1.2 使用静态方法of获取日期和时间</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.of(<span class="number">2012</span>, <span class="number">3</span>, <span class="number">23</span>);</span><br><span class="line">System.out.println(localDate);<span class="comment">//2012-03-23</span></span><br><span class="line">LocalTime localTime = LocalTime.of(<span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line">System.out.println(localTime);<span class="comment">//12:12</span></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.of(<span class="number">2012</span>, <span class="number">3</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line">System.out.println(localDateTime);<span class="comment">//2012-03-24T12:12:12</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-plusDays、plusWeeks、plusMonths、plusYear向当前LocalDate对象添加几天、几周、几个月、几年"><a href="#1-3-plusDays、plusWeeks、plusMonths、plusYear向当前LocalDate对象添加几天、几周、几个月、几年" class="headerlink" title="1.3 plusDays、plusWeeks、plusMonths、plusYear向当前LocalDate对象添加几天、几周、几个月、几年"></a>1.3 plusDays、plusWeeks、plusMonths、plusYear向当前LocalDate对象添加几天、几周、几个月、几年</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line">System.out.println(localDate);<span class="comment">//2020-05-25</span></span><br><span class="line">LocalDate localDate1 = localDate.plusDays(<span class="number">2L</span>);</span><br><span class="line">System.out.println(localDate1);<span class="comment">//2020-05-27</span></span><br><span class="line">LocalDate localDate2 = localDate.plusMonths(<span class="number">2L</span>);</span><br><span class="line">System.out.println(localDate2);<span class="comment">//2020-07-25</span></span><br><span class="line">LocalDate localDate3 = localDate.plusWeeks(<span class="number">2L</span>);</span><br><span class="line">System.out.println(localDate3);<span class="comment">//2020-06-08</span></span><br><span class="line">LocalDate localDate4 = localDate.plusYears(<span class="number">2L</span>);</span><br><span class="line">System.out.println(localDate4);<span class="comment">//2022-05-25</span></span><br></pre></td></tr></table></figure>
<h3 id="1-4-Instant时间戳"><a href="#1-4-Instant时间戳" class="headerlink" title="1.4 Instant时间戳"></a>1.4 Instant时间戳</h3><p>时间戳(以Unix元年：1970年1月1日00：00：00到某个时间之间的毫秒值)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认获取的是以UTC时区</span></span><br><span class="line">Instant now = Instant.now();</span><br><span class="line">System.out.println(now);<span class="comment">//2020-05-25T13:32:32.718Z</span></span><br><span class="line"><span class="comment">//对时间进行偏移量处理,以便获取当前所在时区的时间</span></span><br><span class="line">OffsetDateTime offsetDateTime=now.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">System.out.println(offsetDateTime);<span class="comment">//2020-05-25T21:32:32.718+08:00</span></span><br><span class="line"><span class="comment">//把获取的时间转换成对应的毫秒值</span></span><br><span class="line"><span class="keyword">long</span> l = now.toEpochMilli();</span><br><span class="line">System.out.println(l);<span class="comment">//1590413552718</span></span><br></pre></td></tr></table></figure>
<h2 id="1-5-Duration计算两个时间之间的间隔-Period计算两个日期之间的间隔"><a href="#1-5-Duration计算两个时间之间的间隔-Period计算两个日期之间的间隔" class="headerlink" title="1.5 Duration计算两个时间之间的间隔,Period计算两个日期之间的间隔"></a>1.5 Duration计算两个时间之间的间隔,Period计算两个日期之间的间隔</h2><p><code>Duration</code>和<code>Period</code>的使用方式相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant now = Instant.now();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//用线程睡眠一秒钟来测试Duration的时间差</span></span><br><span class="line">    Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">Instant now2 = Instant.now();</span><br><span class="line"><span class="comment">//比较两个时间的间隔</span></span><br><span class="line">Duration duration = Duration.between(now, now2);</span><br><span class="line"><span class="comment">//默认输出`PT1.002S`为ISO-861的表示方法</span></span><br><span class="line">System.out.println(duration);</span><br><span class="line"><span class="comment">//将ISO的表示的方法转换为纳秒、或者毫秒值</span></span><br><span class="line"><span class="keyword">long</span> l = duration.toNanos();<span class="comment">//1002000000</span></span><br><span class="line"><span class="comment">//转换为毫秒值</span></span><br><span class="line"><span class="comment">//long l1 = duration.toMillis();</span></span><br><span class="line">System.out.println(l);</span><br><span class="line"><span class="comment">//System.out.println(l1);</span></span><br></pre></td></tr></table></figure>
<h2 id="2-java8新特性-新时间与日期API-时间校正器"><a href="#2-java8新特性-新时间与日期API-时间校正器" class="headerlink" title="2.java8新特性-新时间与日期API-时间校正器"></a>2.java8新特性-新时间与日期API-时间校正器</h2><p><code>TemporalAdjuster</code>:时间校正器。有时候我们需要获取例如：将日期调整到“下周日”等操作。<br><code>TemporalAdjusters</code>:该类通过静态方法提供了大量的常用<code>TemporalAdjuster</code>的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line">System.out.println(ldt);<span class="comment">//2020-05-25T22:00:35.532</span></span><br><span class="line"><span class="comment">//获取下一个周日</span></span><br><span class="line">LocalDateTime dateTime = ldt.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));</span><br><span class="line">System.out.println(dateTime);<span class="comment">//2020-05-31T22:00:35.532</span></span><br><span class="line"><span class="comment">//自定义：下一个工作日是什么时候</span></span><br><span class="line">LocalDateTime with = ldt.with(l -&gt; &#123;</span><br><span class="line">    LocalDateTime ldt4 = (LocalDateTime) l;</span><br><span class="line">    <span class="comment">//获取今天是星期几</span></span><br><span class="line">    DayOfWeek dayOfWeek = ldt4.getDayOfWeek();</span><br><span class="line">    System.out.println(dayOfWeek);<span class="comment">//MONDAY</span></span><br><span class="line">      <span class="keyword">if</span> (dayOfWeek.equals(DayOfWeek.FRIDAY)) &#123;</span><br><span class="line">          <span class="keyword">return</span> ldt4.plusDays(<span class="number">3L</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dayOfWeek.equals(DayOfWeek.SUNDAY)) &#123;</span><br><span class="line">          <span class="keyword">return</span> ldt4.plusDays(<span class="number">2L</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> ldt4.plusDays(<span class="number">1L</span>);</span><br><span class="line">      &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> System.out.println(with);<span class="comment">//2020-05-26T22:06:51.576</span></span><br></pre></td></tr></table></figure>
<h2 id="3-java8新特性-新时间与日期API-时间格式化与时区处理"><a href="#3-java8新特性-新时间与日期API-时间格式化与时区处理" class="headerlink" title="3.java8新特性-新时间与日期API-时间格式化与时区处理"></a>3.java8新特性-新时间与日期API-时间格式化与时区处理</h2><h3 id="3-1时间和日期的格式化"><a href="#3-1时间和日期的格式化" class="headerlink" title="3.1时间和日期的格式化"></a>3.1时间和日期的格式化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DateTimeFormatter isoLocalDate = DateTimeFormatter.ISO_LOCAL_DATE;</span><br><span class="line">LocalDateTime now = LocalDateTime.now();</span><br><span class="line">System.out.println(now);</span><br><span class="line">String format = now.format(isoLocalDate);<span class="comment">//2020-05-25T22:22:48.083</span></span><br><span class="line">System.out.println(format);<span class="comment">//2020-05-25</span></span><br><span class="line"><span class="comment">//定义自己的格式</span></span><br><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line">String format1 = dateTimeFormatter.format(now);</span><br><span class="line">System.out.println(format1);<span class="comment">//2020年05月25日</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-时区的处理"><a href="#3-2-时区的处理" class="headerlink" title="3.2 时区的处理"></a>3.2 时区的处理</h3><p>java8中加入了对时区的支持，带时区的时间分别为<code>ZonedDate</code>,<code>ZonedTIme</code>,<code>ZoneDateTime</code>。其中每个时区都对应着ID，地区ID都是<code>区域/城市</code>的格式，例如：<code>Asia/Shanghai</code>等。<br><code>ZoneId</code>该类中包含了所有的时区信息：<br>getAvailableZoneIds():可以获取所有时区的信息<br>of(id):用指定的时区信息获取ZoneId对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取所有的时区</span></span><br><span class="line">Set&lt;String&gt; availableZoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">availableZoneIds.forEach(System.out::println);</span><br><span class="line"><span class="comment">//获取时区为上海的时间</span></span><br><span class="line">LocalDateTime now = LocalDateTime.now(ZoneId.of(<span class="string">"Asia/Shanghai"</span>));<span class="comment">//2020-05-25T22:47:57.216</span></span><br><span class="line">System.out.println(now);</span><br><span class="line"><span class="comment">//也可以使用以下的方法设置时区,返回的是带有时区的时间和日期</span></span><br><span class="line">LocalDateTime now1 = LocalDateTime.now();</span><br><span class="line">ZonedDateTime zonedDateTime = now1.atZone(ZoneId.of(<span class="string">"Asia/Shanghai"</span>));<span class="comment">//2020-05-25T22:47:57.222+08:00[Asia/Shanghai]</span></span><br><span class="line">System.out.println(zonedDateTime);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>JDK1.8</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven学习笔记</title>
    <url>/posts/be02a930.html</url>
    <content><![CDATA[<h2 id="1-Maven-简介"><a href="#1-Maven-简介" class="headerlink" title="1.Maven 简介"></a>1.Maven 简介</h2><p>Maven是Apache软件基金会组织维护的一款自动化构建工具专注服务于Java平台的项目构建和依赖管理 。</p>
<h2 id="2-构建过程的主要几个环节"><a href="#2-构建过程的主要几个环节" class="headerlink" title="2. 构建过程的主要几个环节"></a>2. 构建过程的主要几个环节</h2><p>①清理 ：删除以前的编译结果，为重新编译做好准备。<br>②编译 ：将Java源程序编译为字节码文件。<br>③测试 ：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。<br>④报告 ：在每一次测试后以标准的格式记录和展示测试结果。<br>⑤打包 ：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对应war包。<br>⑥安装 ：在 Maven 环境下特指将打包的结果jar包或war包安装到本地仓库中。<br>⑦部署 ：将打包的结果部署到远程仓库或将war包部署到服务器上运行。</p>
<h2 id="3-maven程序安装"><a href="#3-maven程序安装" class="headerlink" title="3.maven程序安装"></a>3.maven程序安装</h2><ol>
<li><p><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">maven下载</a><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffi2t9uvej31vk0mgq7v.jpg" alt=""></p>
<ul>
<li>Binary：编译之后的二进制文件</li>
<li>Source：表示可以查看源代码的，比Binary大一点</li>
<li>tar.gz archive：Linux、macOS系统使用</li>
<li>zip archive：windows系统使用</li>
</ul>
</li>
<li><p>解压到本地,注意解压的目录下不要有中文</p>
</li>
<li><p>配置环境变量</p>
<ul>
<li><p>mac<br>打开terminel输入以下命令：<code>vim ~/.bash_profile</code>打开.bash_profile文件，在次文件中添加设置环境变量的命令</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export M2_HOME&#x3D; ***这里换成自己解压maven的地址***</span><br><span class="line">&#x2F;&#x2F;示例：export M2_HOME&#x3D;&#x2F;Users&#x2F;XXX&#x2F;Maven&#x2F;apache-maven-3.6.3</span><br><span class="line">export PATH&#x3D;$PATH:$M2_HOME&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>  添加之后保存并推出，执行以下命令使配置生效：<code>source ~/.bash_profile</code><br>  mac中解决<code>source ~/.bash_profile</code>关闭终端后在打开不生效的问题,需要在~/.zshrc文件最后，增加一行：<code>source ~/.bash_profile</code>。如果没有此文件可以使用<code>vim ~/.zshr</code>新建一个文件，在添加对应的命令</p>
</li>
<li><p>win<br>  参考<a href="https://blog.csdn.net/weixin_41557632/article/details/78939663" target="_blank" rel="noopener">WIN10下安装配置mave</a>文章进行配置</p>
</li>
</ul>
</li>
</ol>
<h2 id="4-配置maven本地仓库"><a href="#4-配置maven本地仓库" class="headerlink" title="4.配置maven本地仓库"></a>4.配置maven本地仓库</h2><h3 id="4-1-仓库的分类"><a href="#4-1-仓库的分类" class="headerlink" title="4.1 仓库的分类"></a>4.1 仓库的分类</h3><ol>
<li>本地仓库:为当前本机电脑上的所有Maven工程服务。</li>
<li>远程仓库<ul>
<li>私服：架设在当前局域网环境下，为当前局域网范围内的所有Maven工程服务。<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffiq931w6j30ie06h0ta.jpg" alt=""></li>
<li>中央仓库：架设在 Internet 上，为全世界所有Maven工程服务。</li>
<li>中央仓库的镜像：架设在各个大洲，为中央仓库分担流量。减轻中央仓库的压力，同时更快的响应用户请求。</li>
</ul>
</li>
</ol>
<h3 id="4-2-本地仓库的配置"><a href="#4-2-本地仓库的配置" class="headerlink" title="4.2 本地仓库的配置"></a>4.2 本地仓库的配置</h3><p>在 conf/setting.xml的文件中更改默认的仓库位置,也就是我们jar包下载后存放的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--需要添加的配置--&gt;</span><br><span class="line"> &lt;localRepository&gt;&#x2F;Users&#x2F;wangyufei&#x2F;Maven&#x2F;repository&lt;&#x2F;localRepository&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffj8b8m19j316s0n0gqp.jpg" alt=""></p>
<h2 id="5-maven的标准目录结构"><a href="#5-maven的标准目录结构" class="headerlink" title="5.maven的标准目录结构"></a>5.maven的标准目录结构</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffu24cncjj30pt0bntbh.jpg" alt=""></p>
<h2 id="6-maven的常用命令"><a href="#6-maven的常用命令" class="headerlink" title="6.maven的常用命令"></a>6.maven的常用命令</h2><h3 id="6-1-clean命令"><a href="#6-1-clean命令" class="headerlink" title="6.1 clean命令"></a>6.1 clean命令</h3><p>清除编译产生的target文件夹内容，可以配合相应命令一起使用，如mvn clean package， mvn clean test</p>
<h3 id="6-2-complie命令"><a href="#6-2-complie命令" class="headerlink" title="6.2 complie命令"></a>6.2 complie命令</h3><p>该命令可以对src/main/java目录的下的代码进行编译</p>
<h3 id="6-3-test命令"><a href="#6-3-test命令" class="headerlink" title="6.3 test命令"></a>6.3 test命令</h3><p>测试命令,或执行src/test/java/下junit的测试用例</p>
<h3 id="6-4-package命令"><a href="#6-4-package命令" class="headerlink" title="6.4 package命令"></a>6.4 package命令</h3><p>mvn package，打包项目</p>
<h3 id="6-5-install命令"><a href="#6-5-install命令" class="headerlink" title="6.5 install命令"></a>6.5 install命令</h3><p>mvn install，打包后将其安装在本地仓库</p>
<h2 id="7-maven的生命周期"><a href="#7-maven的生命周期" class="headerlink" title="7. maven的生命周期"></a>7. maven的生命周期</h2><h3 id="7-1-Maven-有三套相互独立的生命周期"><a href="#7-1-Maven-有三套相互独立的生命周期" class="headerlink" title="7.1 Maven 有三套相互独立的生命周期"></a>7.1 Maven 有三套相互独立的生命周期</h3><ol>
<li>Clean Lifecycle 在进行真正的构建之前进行一些清理工作。</li>
<li>Default Lifecycle 构建的核心部分，编译，测试，打包，安装，部署等等。</li>
<li>Site Lifecycle 生成项目报告，站点，发布站点。<br>它们是相互独立的，你可以仅仅调用<br>clean 来清理工作目录，仅仅调用 site 来生 成站点。 当然你也可以<br>直接运行 mvn clean install site 运行所有这三套生命周期。</li>
</ol>
<h2 id="8-maven的概念模型图"><a href="#8-maven的概念模型图" class="headerlink" title="8. maven的概念模型图"></a>8. maven的概念模型图</h2><h3 id="8-1-POM"><a href="#8-1-POM" class="headerlink" title="8.1 POM"></a>8.1 POM</h3><p>Project Object Model：项目对象模型。将 Java 工程 的相关信息封装为 对象 作为便于操作和管理的 模型 。Maven 工程的核心配置。可以说学习Maven 就是学习 pom.xml 文件中的配置。</p>
<h3 id="8-2-Maven-的坐标"><a href="#8-2-Maven-的坐标" class="headerlink" title="8.2 Maven 的坐标"></a>8.2 Maven 的坐标</h3><p>使用如下三个向量在Maven的仓库中唯一的确定一个Maven工程。</p>
<ol>
<li><p>groupid：公司或组织的域名倒序当前项目名称</p>
</li>
<li><p>artifactId：当前项目的模块名称</p>
</li>
<li><p>version：当前模块的版本</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;groupId&gt;org.example&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;wugujiawebmaven&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="8-3-如何通过坐标到仓库中查找-jar包"><a href="#8-3-如何通过坐标到仓库中查找-jar包" class="headerlink" title="8.3 如何通过坐标到仓库中查找 jar包"></a>8.3 如何通过坐标到仓库中查找 jar包</h3><ol>
<li>将 gav 三个向量连起来<code>org.example+wugujiawebmaven+1.0-SNAPSHOT</code></li>
<li>以连起来的字符串作为目录结构到仓库中查找<code>org/example/wugujiawebmaven/1.0-SNAPSHOT</code></li>
</ol>
<p><strong><em>※注意：我们自己的Maven工程必须执行安装操作才会进入仓库 。安装的命令是： mvn install</em></strong></p>
<h2 id="9-idea集成maven插件"><a href="#9-idea集成maven插件" class="headerlink" title="9. idea集成maven插件"></a>9. idea集成maven插件</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffrb1dkjqj31c00u07wh.jpg" alt=""><br>配置创建java工程<code>-DarchetypeCatalog=local</code> 是为了防止在无网络的情况下可是使用本地已经下载好的maven的骨架<br>配置路径如下：<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffreyumrvj314f0u0tf8.jpg" alt=""></p>
<h2 id="10-使用骨架创建maven的java工程"><a href="#10-使用骨架创建maven的java工程" class="headerlink" title="10. 使用骨架创建maven的java工程"></a>10. 使用骨架创建maven的java工程</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffri7ezbpj31iu0u0k3u.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffrkwyag3j31i50u079a.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffrnc34uej31gz0u00xc.jpg" alt=""></p>
<h2 id="11-不实用骨架创建maven的java工程"><a href="#11-不实用骨架创建maven的java工程" class="headerlink" title="11. 不实用骨架创建maven的java工程"></a>11. 不实用骨架创建maven的java工程</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffrtdfg0nj31h70u0gyf.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffrtxvpltj31ne0t0whp.jpg" alt=""></p>
<h2 id="12-使用骨架创建maven的web工程"><a href="#12-使用骨架创建maven的web工程" class="headerlink" title="12. 使用骨架创建maven的web工程"></a>12. 使用骨架创建maven的web工程</h2><ol>
<li>创建web工程<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffryrg9q3j31h40u0aom.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffs07au3bj31i30u00wt.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffs0ll4c2j31hf0u079r.jpg" alt=""></li>
<li>创建好的javaweb工程(图1)，所以我们需要手动添加一个java的目录用于编写java代码(图2）,还要将java目录添加为Source Root(图3)<br> <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffs5okhm8j317m0m4e81.jpg" alt="图1"><br> <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffs77nvf6j31h40u0x6p.jpg" alt="图2"><br> <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffs9f0i5cj312h0u0b2a.jpg" alt="图3"></li>
</ol>
<h2 id="13-创建自定义的JavaWeb工程"><a href="#13-创建自定义的JavaWeb工程" class="headerlink" title="13. 创建自定义的JavaWeb工程"></a>13. 创建自定义的JavaWeb工程</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfft5u46n5j31hb0u0dqk.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfft6zy94pj31ih0u0gsk.jpg" alt=""><br>创建web工程信息<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfft8j06icj30u00wt4qp.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gffta8mvonj31080u07am.jpg" alt=""><br>创建好的javaweb工程目录如图所示<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfftb47ep7j326i0qwqv6.jpg" alt=""></p>
<h2 id="14-idea中执行maven的命令"><a href="#14-idea中执行maven的命令" class="headerlink" title="14.idea中执行maven的命令"></a>14.idea中执行maven的命令</h2><ol>
<li>clean、test、complie、package、install的命令输入方法相同<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfftegsyzaj31a50u0kjl.jpg" alt=""></li>
</ol>
<h2 id="15-Maven插件"><a href="#15-Maven插件" class="headerlink" title="15. Maven插件"></a>15. Maven插件</h2><p>Maven是一个核心引擎，提供了基本的项目处理能力和建设过程的管理，以及一系列的插件是用来执行实际建设任务。maven插件可以完成一些特定的功能。例如，集成jdk插件可以方便的修改项目的编译环境；集成tomcat插件后，无需安装tomcat服务器就可以运行tomcat进行项目的发布与测试。在pom.xml中通过plugin标签引入maven的功能插件。</p>
<h3 id="15-1-JDK编译版本的插件"><a href="#15-1-JDK编译版本的插件" class="headerlink" title="15.1 JDK编译版本的插件"></a>15.1 JDK编译版本的插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- jdk版本插件 --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;source&gt;1.8&lt;&#x2F;source&gt;</span><br><span class="line">        &lt;target&gt;1.8&lt;&#x2F;target&gt;</span><br><span class="line">        &lt;encoding&gt;UTF-8&lt;&#x2F;encoding&gt;</span><br><span class="line">        &lt;showWarnings&gt;true&lt;&#x2F;showWarnings&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>

<h3 id="15-2-Tomcat7服务端的插件"><a href="#15-2-Tomcat7服务端的插件" class="headerlink" title="15.2 Tomcat7服务端的插件"></a>15.2 Tomcat7服务端的插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- tomcat7插件 --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat7-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;port&gt;8080&lt;&#x2F;port&gt;</span><br><span class="line">        &lt;server&gt;tomcat7&lt;&#x2F;server&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure>
<p><strong><em>tomcat插件注意问题</em></strong><br>Maven的中央仓库中只有Tomcat7.X版本的插件，而之前我们使用的是8.X的版本，如果想使用Tomcat8.X的插件可以去其他第三方仓库进行寻找，或者使用IDEA集成外部Tomcat8极其以上版本，进行项目的发布</p>
<h2 id="16-依赖范围"><a href="#16-依赖范围" class="headerlink" title="16. 依赖范围"></a>16. 依赖范围</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfftnby1jsj30dn07g0sq.jpg" alt=""></p>
<ul>
<li>compile 编译、测试、运行，A在编译时依赖B，并且在测试和运行时也依赖<br>  strus-core、spring-beans。打到war包或jar包</li>
<li>provided 编译、和测试有效，A在编译和测试时需要B<br>  servlet-api就是编译和测试有用，在运行时不用（tomcat容器已提供）<br>不会打到war</li>
<li>runtime：测试、运行有效<br>  在运行和测试时需要通过jdbc驱动包（mysql驱动）连接数据库，需要的会打到war</li>
<li>test：只是测试有效，只在单元测试类中用<br>  例如：junit 不会打到war</li>
<li>按照依赖强度，由强到弱来排序：(理解)<br>  compile&gt; provided&gt; runtime&gt; test</li>
</ul>
<h2 id="17-maven倒入jar包冲突解决"><a href="#17-maven倒入jar包冲突解决" class="headerlink" title="17. maven倒入jar包冲突解决"></a>17. maven倒入jar包冲突解决</h2><ol>
<li>路径最短者优先<br> <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffzi2u0s7j30dw03oaah.jpg" alt=""></li>
<li>路径相同时先声明者优先。这里声明的先后顺序指的是dependency标签配置的先后顺序。<br> <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gffzigrc5cj30di03caae.jpg" alt=""></li>
<li>使用<code>&lt;exclusions&gt;</code>标签排除</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.a tguigu.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;HelloFriend&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1 SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;type&gt;jar&lt;&#x2F;type&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;commons logging&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons logging&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">    &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="18-统一管理所依赖的版本"><a href="#18-统一管理所依赖的版本" class="headerlink" title="18. 统一管理所依赖的版本"></a>18. 统一管理所依赖的版本</h2><p>对同一个框架的一组jar包最好使用相同的版本。为了方便升级框架，可以将 jar 包的版本信息统一提取出来</p>
<ol>
<li><p>统一声明版本号</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F;其中</span><br><span class="line">atguigu.spring.version 部分 是自定义标签</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">    &lt;atguigu.spring.version&gt;4.1.1.RELEASE&lt;&#x2F;atguigu.s pring.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>引用前面声明的版本号</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;springcore&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;atguigu.spring. version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    ……</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完整示例</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">        xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">        xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">   &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">   &lt;groupId&gt;com.itheima&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;ssm_parent_331&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</span><br><span class="line">   &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;modules&gt;</span><br><span class="line">       &lt;module&gt;ssm_dao_331&lt;&#x2F;module&gt;</span><br><span class="line">       &lt;module&gt;ssm_service_331&lt;&#x2F;module&gt;</span><br><span class="line">       &lt;module&gt;ssm_web_331&lt;&#x2F;module&gt;</span><br><span class="line">       &lt;module&gt;ssm_domain_331&lt;&#x2F;module&gt;</span><br><span class="line">       &lt;module&gt;ssm_utils_331&lt;&#x2F;module&gt;</span><br><span class="line">   &lt;&#x2F;modules&gt;</span><br><span class="line">   &lt;properties&gt;</span><br><span class="line">       &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">       &lt;maven.compiler.source&gt;1.7&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">       &lt;maven.compiler.target&gt;1.7&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">       &lt;spring.version&gt;5.0.2.RELEASE&lt;&#x2F;spring.version&gt;</span><br><span class="line">       &lt;spring.security.version&gt;5.0.2.RELEASE&lt;&#x2F;spring.security.version&gt;</span><br><span class="line">   &lt;&#x2F;properties&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;!-- spring相关的jar包 --&gt;</span><br><span class="line">       &lt;!-- 容器 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- 事务 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- JDBC --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- 测试 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- springMVC --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- mybatis --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;3.4.5&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- mybatis与Spring整合 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.3.1&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- AOP切面 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.8.7&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- 数据源 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.1.9&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- 单元测试 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- servletAPI --&gt;</span><br><span class="line">       &lt;!-- JSP应用 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.0&lt;&#x2F;version&gt;</span><br><span class="line">           &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- servlet应用 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">           &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- 日志记录工具 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.2.17&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;log4j-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.10.0&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;log4j-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.10.0&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;log4j-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.9.1&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.7.25&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;log4j-slf4j-impl&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.9.1&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;log4j-jcl&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.9.1&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- mysql --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;5.1.6&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!--oracle的jar包--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.oracle&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;ojdbc14&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;10.2.0.2.0&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- JSTL --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;jstl&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;taglibs&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;standard&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.1.1&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;!-- 文件上传 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.3.1&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;c3p0&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;c3p0&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;0.9.1.2&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;pagehelper&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;5.1.2&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.security&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-security-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.security.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.security&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-security-config&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.security.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.security&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-security-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.security.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.security&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-security-taglibs&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;$&#123;spring.security.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="19-maven工程的拆分与聚合"><a href="#19-maven工程的拆分与聚合" class="headerlink" title="19. maven工程的拆分与聚合"></a>19. maven工程的拆分与聚合</h2><h3 id="19-1-创建父工程-只需要有pom-xnl文件"><a href="#19-1-创建父工程-只需要有pom-xnl文件" class="headerlink" title="19.1 创建父工程(只需要有pom.xnl文件)"></a>19.1 创建父工程(只需要有pom.xnl文件)</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg1lp5p48j31ih0u0wrb.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg1nppqvjj31i50u0gqy.jpg" alt=""><br>父工程中可以将<code>src</code>的文件夹删除掉,只留下<code>pom.xml</code>文件<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg1prv2npj31fy0u01ky.jpg" alt=""></p>
<h3 id="19-2-子模块的创建"><a href="#19-2-子模块的创建" class="headerlink" title="19.2 子模块的创建"></a>19.2 子模块的创建</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg1s2lmzmj310i0u01ky.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg1tfvpygj31io0u013q.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg1upasaqj31ij0u0ted.jpg" alt=""></p>
<h3 id="19-3-工程和模块的区别"><a href="#19-3-工程和模块的区别" class="headerlink" title="19.3 工程和模块的区别"></a>19.3 工程和模块的区别</h3><p>区别：</p>
<ol>
<li>工程不等于完整的项目,模块也不等于一个完整的项目。代码完整,就可以说这是一个完整的项目和此项目和模块没有关系</li>
<li>工程只能使用自己的内部资源,工程天生时独立的。后天可以和其他工程和模块建立关联关系</li>
<li>模块天生是属于父工程的,模块一旦创建,所有父工程的资源都可以使用</li>
</ol>
<p>关系：</p>
<ol>
<li>父子工程中,子模块天生集成父工程,可以使用父工程所有的资源</li>
<li>子模块之间是没有关联的</li>
<li>子模块之间可以使用<code>denpendency</code>之间来互相引用,建立关联</li>
<li>平级之间引用叫做依赖,依赖不是先天的,是后天建立的</li>
<li>父子工程之间不用建立关系,继承关系是先天的,不需要手动建立</li>
</ol>
<h3 id="19-4-maven父子工程三种启动方式"><a href="#19-4-maven父子工程三种启动方式" class="headerlink" title="19.4 maven父子工程三种启动方式"></a>19.4 maven父子工程三种启动方式</h3><ol>
<li>可以在父工程中使用 mvn run</li>
<li>使用web模块中启动时,需要先将其依赖的jar发布到本地仓库或者远程仓库中</li>
<li>添加本地的tomcat,不在使用maven中自带的tomcat</li>
</ol>
<h3 id="19-5-搭建maven的私服环境"><a href="#19-5-搭建maven的私服环境" class="headerlink" title="19.5 搭建maven的私服环境"></a>19.5 搭建maven的私服环境</h3><ol>
<li><p>下载<a href="：http://www.sonatype.org/nexus/archived/">nexus</a><br>Nexus 是Maven仓库管理器，通过nexus可以搭建maven仓库，同时nexus还提供强大的仓库管理功能，构件搜索功能等。</p>
</li>
<li><p>Centos7上搭建私服</p>
<ul>
<li><p>上传到Centos7服务器<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg5gm5vknj31iw0fojv2.jpg" alt=""></p>
</li>
<li><p>使用命令<code>tar -avxf nexus-3.23.0-03-unix.tar.gz</code>解压完成后会出现一下两个文件(一个是nexus服务,一个是私有仓库)<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg5iheh9tj31gg0f60wc.jpg" alt=""></p>
</li>
<li><p>修改默认的端口<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg72x96olj31fo0gigoo.jpg" alt=""></p>
</li>
<li><p>启动nexus<br>启动 Nexus（默认端口是8081），Nexus 常用的一些命令包括：/nexus-3.23.0-03/bin/nexus {start|stop|run|run-redirect|status|restart|force-reload}，下面我们启动Nexus：  </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WARNING: ************************************************************</span><br><span class="line">WARNING: Detected execution as &quot;root&quot; user.  This is NOT recommended!</span><br><span class="line">WARNING: ************************************************************</span><br><span class="line">Starting nexus</span><br></pre></td></tr></table></figure>
<p>上面在启动过程中出现警告：“不推荐使用root用户启动”。这个警告不影响Nexus的正常访问和使用。 如果上面的环境变量配置了,试着修改</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;bin&#x2F;nexus.rc文件中的run_as_user&#x3D; “root”</span><br></pre></td></tr></table></figure>
<h3 id="19-6-私服的应用"><a href="#19-6-私服的应用" class="headerlink" title="19.6 私服的应用"></a>19.6 私服的应用</h3><h4 id="19-6-1-账号和密码是固定的-admin-admin123"><a href="#19-6-1-账号和密码是固定的-admin-admin123" class="headerlink" title="19.6.1 账号和密码是固定的 admin/admin123"></a>19.6.1 账号和密码是固定的 admin/admin123</h4><h4 id="19-6-2-登陆私服的配置-server-xml"><a href="#19-6-2-登陆私服的配置-server-xml" class="headerlink" title="19.6.2 登陆私服的配置(server.xml)"></a>19.6.2 登陆私服的配置(server.xml)</h4>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">        &lt;id&gt;releases&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">        &lt;password&gt;admin123&lt;&#x2F;password&gt;</span><br><span class="line">      &lt;&#x2F;server&gt;</span><br><span class="line">      &lt;server&gt;</span><br><span class="line">        &lt;id&gt;snapshots&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">        &lt;password&gt;admin123&lt;&#x2F;password&gt;</span><br><span class="line">      &lt;&#x2F;server&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfgc8gj788j31a80lwjvk.jpg" alt=""></p>
</li>
</ul>
</li>
</ol>
<h4 id="19-6-3-配置项目pom-xml"><a href="#19-6-3-配置项目pom-xml" class="headerlink" title="19.6.3 配置项目pom.xml"></a>19.6.3 配置项目pom.xml</h4><p>配置私服仓库的地址，本公司的自己的jar包会上传到私服的宿主仓库，根据工程的版本号决定上传到哪个宿主仓库，如果版本为release则上传到私服的release仓库，如果版本为snapshot则上传到私服的snapshot仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;release&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;name&gt;Release Repository&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;ip&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;releases&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;repository&gt;</span><br><span class="line">    &lt;snapshotRepository&gt;</span><br><span class="line">        &lt;id&gt;snapshot&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;name&gt;Snapshot Repository&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;ip&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;snapshots&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;snapshotRepository&gt;</span><br><span class="line">&lt;&#x2F;distributionManagement&gt;</span><br></pre></td></tr></table></figure>
<p><strong><em>注意：pom.xml这里<id> 和 settings.xml 配置 <id> 对应！</em></strong></p>
<h4 id="19-6-4-相关jar包的下载"><a href="#19-6-4-相关jar包的下载" class="headerlink" title="19.6.4 相关jar包的下载"></a>19.6.4 相关jar包的下载</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 下载jar包配置 --&gt;</span><br><span class="line">	&lt;profile&gt; </span><br><span class="line">		&lt;!--profile的id --&gt;</span><br><span class="line">		&lt;id&gt;dev&lt;&#x2F;id&gt;</span><br><span class="line">		&lt;repositories&gt;</span><br><span class="line">			&lt;repository&gt; &lt;!--仓库id，repositories可以配置多个仓库，保证id不重复 --&gt;</span><br><span class="line">				&lt;id&gt;nexus&lt;&#x2F;id&gt; &lt;!--仓库地址，即nexus仓库组的地址 --&gt;</span><br><span class="line">				&lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt; &lt;!--是否下载releases构件 --&gt;</span><br><span class="line">				&lt;releases&gt;</span><br><span class="line">					&lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">				&lt;&#x2F;releases&gt; &lt;!--是否下载snapshots构件 --&gt;</span><br><span class="line">				&lt;snapshots&gt;</span><br><span class="line">					&lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">				&lt;&#x2F;snapshots&gt;</span><br><span class="line">			&lt;&#x2F;repository&gt;</span><br><span class="line">		&lt;&#x2F;repositories&gt;</span><br><span class="line">		&lt;pluginRepositories&gt; &lt;!-- 插件仓库，maven的运行依赖插件，也需要从私服下载插件 --&gt;</span><br><span class="line">			&lt;pluginRepository&gt; &lt;!-- 插件仓库的id不允许重复，如果重复后边配置会覆盖前边 --&gt;</span><br><span class="line">				&lt;id&gt;public&lt;&#x2F;id&gt;</span><br><span class="line">				&lt;name&gt;Public Repositories&lt;&#x2F;name&gt;</span><br><span class="line">				&lt;url&gt;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">			&lt;&#x2F;pluginRepository&gt;</span><br><span class="line">		&lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">	&lt;&#x2F;profile&gt;</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;activeProfiles&gt;</span><br><span class="line">		&lt;activeProfile&gt;dev&lt;&#x2F;activeProfile&gt;</span><br><span class="line">	&lt;&#x2F;activeProfiles&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfgcmn2bayj311r0u0qit.jpg" alt=""></p>
<h4 id="19-6-5-安装第三方jar包到本地仓库和私服"><a href="#19-6-5-安装第三方jar包到本地仓库和私服" class="headerlink" title="19.6.5 安装第三方jar包到本地仓库和私服"></a>19.6.5 安装第三方jar包到本地仓库和私服</h4><ol>
<li>安装第三方jar包到本地仓库</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">----进入jar包所在目录运行</span><br><span class="line">mvn install:install-file -DgroupId&#x3D;com.alibaba -DartifactId&#x3D;fastjson -Dversion&#x3D;1.1.37 -Dfile&#x3D;fastjson-1.1.37.jar -Dpackaging&#x3D;jar</span><br><span class="line">----打开cmd直接运行</span><br><span class="line">mvn install:install-file -DgroupId&#x3D;com.alibaba -DartifactId&#x3D;fastjson -Dversion&#x3D;1.1.37 -Dpackaging&#x3D;jar -Dfile&#x3D;C:\my_java\授课资料\资料：maven【高级】\安装第三方jar包\fastjson-1.1.37.jar</span><br></pre></td></tr></table></figure>
<ol>
<li>安装第三方jar包到私服</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--在settings配置文件中添加登录私服第三方登录信息</span><br><span class="line">&lt;server&gt;</span><br><span class="line">&lt;id&gt;thirdparty&lt;&#x2F;id&gt;</span><br><span class="line">&lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">&lt;password&gt;admin123&lt;&#x2F;password&gt;</span><br><span class="line">&lt;&#x2F;server&gt;</span><br><span class="line">----进入jar包所在目录运行</span><br><span class="line">mvn deploy:deploy-file -DgroupId&#x3D;com.alibaba -DartifactId&#x3D;fastjson -Dversion&#x3D;1.1.37 -Dpackaging&#x3D;jar -Dfile&#x3D;fastjson-1.1.37.jar -Durl&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;thirdparty&#x2F; -DrepositoryId&#x3D;thirdparty</span><br><span class="line">----打开cmd直接运行</span><br><span class="line">mvn deploy:deploy-file -DgroupId&#x3D;com.alibaba -DartifactId&#x3D;fastjson -Dversion&#x3D;1.1.37 -Dpackaging&#x3D;jar -Dfile&#x3D;C:\my_java\授课资料\资料：maven【高级】\安装第三方jar包\fastjson-1.1.37.jar -Durl&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;thirdparty&#x2F; -DrepositoryId&#x3D;thirdparty</span><br></pre></td></tr></table></figure>

<h2 id="20-配置全局的jdk"><a href="#20-配置全局的jdk" class="headerlink" title="20. 配置全局的jdk"></a>20. 配置全局的jdk</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置全局的jdk为1.8--&gt;</span><br><span class="line">  &lt;profile&gt;</span><br><span class="line">      &lt;id&gt;jdk-1.8&lt;&#x2F;id&gt; </span><br><span class="line">      &lt;activation&gt;</span><br><span class="line">        &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;</span><br><span class="line">        &lt;jdk&gt;1.8&lt;&#x2F;jdk&gt; </span><br><span class="line">      &lt;&#x2F;activation&gt; </span><br><span class="line">         </span><br><span class="line">      &lt;properties&gt; </span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt; </span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt; </span><br><span class="line">        &lt;maven.compiler.compilerVersion&gt;1.8&lt;&#x2F;maven.compiler.compilerVersion&gt; </span><br><span class="line">      &lt;&#x2F;properties&gt;  </span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfgd6p48qbj315y0u0qar.jpg" alt=""></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记二</title>
    <url>/posts/a71dc8d.html</url>
    <content><![CDATA[<h2 id="1-Mybatis逆向工程"><a href="#1-Mybatis逆向工程" class="headerlink" title="1. Mybatis逆向工程"></a>1. Mybatis逆向工程</h2><h3 id="1-1-说明"><a href="#1-1-说明" class="headerlink" title="1.1 说明"></a>1.1 说明</h3><ol>
<li><p>MyBatis Generator<a href="http://mybatis.org/generator/#" target="_blank" rel="noopener">官方文档地址</a></p>
</li>
<li><p><a href="https://github.com/mybatis/generator/releases" target="_blank" rel="noopener">官方工程地址</a></p>
</li>
<li><p>依赖的包</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--mybatis逆向工程依赖包--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mybatis-generator-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.4.0&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.4.0&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-逆向功能的配置文件"><a href="#1-2-逆向功能的配置文件" class="headerlink" title="1.2 逆向功能的配置文件"></a>1.2 逆向功能的配置文件</h3> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">  PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">  &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- </span><br><span class="line">		targetRuntime&#x3D;&quot;MyBatis3Simple&quot;:生成简单版的CRUD</span><br><span class="line">		MyBatis3:豪华版</span><br><span class="line">	</span><br><span class="line">	 --&gt;</span><br><span class="line">  &lt;context id&#x3D;&quot;DB2Tables&quot; targetRuntime&#x3D;&quot;MyBatis3&quot;&gt;</span><br><span class="line">  	&lt;!-- jdbcConnection：指定如何连接到目标数据库 --&gt;</span><br><span class="line">    &lt;jdbcConnection driverClass&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">        connectionURL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?allowMultiQueries&#x3D;true&quot;</span><br><span class="line">        userId&#x3D;&quot;root&quot;</span><br><span class="line">        password&#x3D;&quot;123456&quot;&gt;</span><br><span class="line">    &lt;&#x2F;jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!--  --&gt;</span><br><span class="line">    &lt;javaTypeResolver &gt;</span><br><span class="line">      &lt;property name&#x3D;&quot;forceBigDecimals&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- javaModelGenerator：指定javaBean的生成策略 </span><br><span class="line">	targetPackage&#x3D;&quot;test.model&quot;：目标包名</span><br><span class="line">	targetProject&#x3D;&quot;\MBGTestProject\src&quot;：目标工程</span><br><span class="line">	--&gt;</span><br><span class="line">    &lt;javaModelGenerator targetPackage&#x3D;&quot;com.atguigu.mybatis.bean&quot; </span><br><span class="line">    		targetProject&#x3D;&quot;.\src&quot;&gt;</span><br><span class="line">      &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">      &lt;property name&#x3D;&quot;trimStrings&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- sqlMapGenerator：sql映射生成策略： --&gt;</span><br><span class="line">    &lt;sqlMapGenerator targetPackage&#x3D;&quot;com.atguigu.mybatis.dao&quot;  </span><br><span class="line">    	targetProject&#x3D;&quot;.\conf&quot;&gt;</span><br><span class="line">      &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- javaClientGenerator:指定mapper接口所在的位置 --&gt;</span><br><span class="line">    &lt;javaClientGenerator type&#x3D;&quot;XMLMAPPER&quot; targetPackage&#x3D;&quot;com.atguigu.mybatis.dao&quot;  </span><br><span class="line">    	targetProject&#x3D;&quot;.\src&quot;&gt;</span><br><span class="line">      &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 指定要逆向分析哪些表：根据表要创建javaBean --&gt;</span><br><span class="line">    &lt;table tableName&#x3D;&quot;tbl_dept&quot; domainObjectName&#x3D;&quot;Department&quot;&gt;&lt;&#x2F;table&gt;</span><br><span class="line">    &lt;table tableName&#x3D;&quot;tbl_employee&quot; domainObjectName&#x3D;&quot;Employee&quot;&gt;&lt;&#x2F;table&gt;</span><br><span class="line">  &lt;&#x2F;context&gt;</span><br><span class="line">&lt;&#x2F;generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="2-Mybatis的运行原理"><a href="#2-Mybatis的运行原理" class="headerlink" title="2. Mybatis的运行原理"></a>2. Mybatis的运行原理</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn1ec5vpzj30pc0eqdi7.jpg" alt="运行原理图"><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn1fqhsrdj315l0u07b9.jpg" alt="框架原理图"></p>
<h3 id="2-1-sqlsessionFactory的初始化"><a href="#2-1-sqlsessionFactory的初始化" class="headerlink" title="2.1 sqlsessionFactory的初始化"></a>2.1 sqlsessionFactory的初始化</h3><ol>
<li>根据配置文件创建sqlsessionFactory<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn8jtopjwj315e0q6jwj.jpg" alt=""></li>
<li>几个重要的类<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn8l20ikdj30oy08amyc.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn8lcrpp2j30wy0n6gqg.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn8lnaxpkj310m0pijwy.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn8lu4tvtj31ca094tbp.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn8m1jq87j316q0cotc7.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn8mhihjrj30s408mdhp.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn8mo15jrj30s408mdhp.jpg" alt="缓存中保存的key：方法id+sql+参数xxx"></li>
</ol>
<h3 id="2-2-openSession获取SqlSession对象"><a href="#2-2-openSession获取SqlSession对象" class="headerlink" title="2.2 openSession获取SqlSession对象"></a>2.2 openSession获取SqlSession对象</h3><p>返回SqlSession的实现类DefaultSqlSession对象。他里面包含了Executor和Configuration；Executor会在这一步被创建<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn931bghjj317a0mcn16.jpg" alt=""></p>
<h3 id="2-3-getMapper获取到接口的代理对象"><a href="#2-3-getMapper获取到接口的代理对象" class="headerlink" title="2.3 getMapper获取到接口的代理对象"></a>2.3 getMapper获取到接口的代理对象</h3><p>getMapper返回接口的代理对象包含了SqlSession对象<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfn9ey08pxj312a0lon0i.jpg" alt=""></p>
<h3 id="2-4-查询实现"><a href="#2-4-查询实现" class="headerlink" title="2.4 查询实现"></a>2.4 查询实现</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfnagofu78j30zm0u043h.jpg" alt=""></p>
<h2 id="3-插件"><a href="#3-插件" class="headerlink" title="3.插件"></a>3.插件</h2><p>MyBatis在四大对象的创建过程中，都会有插件进行介入。插件可以利用动态代理机制一层层的包装目标对象，而实现在目标对象执行目标方法之前进行拦截的效果。<br>MyBatis 允许在已映射语句执行过程中的某一点进行拦截调用。<br>默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p>
<ul>
<li>Executor(update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li>
<li>ParameterHandler(getParameterObject, setParameters)</li>
<li>ResultSetHandler(handleResultSets, handleOutputParameters)</li>
<li>StatementHandler(prepare, parameterize, batch, update, query)</li>
</ul>
<h3 id="3-1-插件开发的步骤"><a href="#3-1-插件开发的步骤" class="headerlink" title="3.1 插件开发的步骤"></a>3.1 插件开发的步骤</h3><ol>
<li><p>编写插件实现Interceptor接口并使用@Intercepts注解完成插件签名</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.atguigu.in;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.executor.statement.StatementHandler;</span><br><span class="line">import org.apache.ibatis.plugin.*;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * intercept:拦截目标对象的目标方法的执行</span><br><span class="line"> * 完成插件的签名：</span><br><span class="line"> *      告诉mybatis当前插件来拦截那个执行器的那个方法</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Intercepts(&#123;</span><br><span class="line">        @Signature(</span><br><span class="line">                type &#x3D; StatementHandler.class,method &#x3D; &quot;parameterize&quot;,args&#x3D;java.sql.Statement.class</span><br><span class="line">        )</span><br><span class="line">&#125;)</span><br><span class="line">public class MyFirstIn implements Interceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F;放行执行目标方法</span><br><span class="line">        Object proceed &#x3D; invocation.proceed();</span><br><span class="line">        return proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 插件包装</span><br><span class="line">     * 为目标对象创建一个代理对象</span><br><span class="line">     * @param target</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public Object plugin(Object target) &#123;</span><br><span class="line">        Object wrap &#x3D; Plugin.wrap(target, this);</span><br><span class="line">        &#x2F;&#x2F;我们可以借助Plugin的wrap方法来使用当前的拦截器包装我们的对象</span><br><span class="line">        &#x2F;&#x2F;返回为当前target创建的动态代理</span><br><span class="line">        return wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将插件注册时的properties属性注册出来</span><br><span class="line">     * @param properties</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void setProperties(Properties properties) &#123;</span><br><span class="line">        System.out.println(&quot;可以拿到插件的信息&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li>
<li><p>在全局配置文件中注册插件</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">        &lt;plugin interceptor&#x3D;&quot;com.atguigu.in.MyFirstIn&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;ceshi&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="4-mybatis批量操作"><a href="#4-mybatis批量操作" class="headerlink" title="4. mybatis批量操作"></a>4. mybatis批量操作</h2><ul>
<li><p>默认的openSession() 方法没有参数,它会创建有如下特性的</p>
<ul>
<li>会开启一个事务(也就是不自动提交)</li>
<li>连接对象会从由活动环境配置的数据源实例得到</li>
<li>事务隔离级别将会使用驱动或数据源的默认设置</li>
<li>预处理语句不会被复用,也不会批量处理更</li>
</ul>
</li>
<li><p>openSession 方法的ExecutorType类型的参数，枚举类型:</p>
<ul>
<li>ExecutorType.SIMPLE: 这个执行器类型不做特殊的事情（这是默认装配的）。它为每个语句的执行创建一个新的预处理语句</li>
<li>ExecutorType.REUSE: 这个执行器类型会复用预处理语句</li>
<li>ExecutorType.BATCH: 这个执行器会批量执行所有更新语句<br>  <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfng3gzkm0j30qh05f0uv.jpg" alt=""></li>
</ul>
</li>
<li><p>批量操作我们是使用MyBatis提供的BatchExecutor进行的，他的底层就是通过jdbc攒sql的方式进行的。我们可以让他攒够一定数量后发给数据库一次</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    publicvoidtest01() &#123;</span><br><span class="line">SqlSession openSession &#x3D; build.openSession(ExecutorType.BATCH);</span><br><span class="line">UserDao mapper &#x3D; openSession.getMapper(UserDao.class);</span><br><span class="line">longstart &#x3D; System.currentTimeMillis();</span><br><span class="line">for(inti &#x3D; 0; i &lt; 1000000; i++) &#123;</span><br><span class="line">String name &#x3D; UUID.randomUUID().toString().substring(0, 5);</span><br><span class="line">mapper.addUser(newUser(null, name, 13));</span><br><span class="line">&#125;</span><br><span class="line">openSession.commit();</span><br><span class="line">openSession.close();</span><br><span class="line">longend &#x3D; System.currentTimeMillis();</span><br><span class="line">System.out.println(&quot;耗时时间：&quot;+(end-start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>与Spring整合中，我们推荐，额外的配置一个可以专门用来执行批量操作的sqlSession<br>  <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfngak3h1uj30ur02kt9l.jpg" alt=""></p>
</li>
<li><p>需要用到批量操作的时候，我们可以注入配置的这个批量SqlSession。通过他获取到mapper映射器进行操作</p>
</li>
</ul>
<p><strong><em>注意</em></strong></p>
<ol>
<li>批量操作是在session.commit()以后才发送sql语句给数据库进行执行的</li>
<li>如果我们想让其提前执行，以方便后续可能的查询操作获取数据，我们可以使用sqlSession.flushStatements()方法，让其直接冲刷到数据库进行执行</li>
</ol>
<h2 id="5-一个带游标的存储过程"><a href="#5-一个带游标的存储过程" class="headerlink" title="5. 一个带游标的存储过程"></a>5. 一个带游标的存储过程</h2><ul>
<li><p>MyBatis对存储过程的游标提供了一个JdbcType=CURSOR的支持，可以智能的把游标读取到的数据，映射到我们声明的结果集中</p>
</li>
<li><p>存储过程的调用</p>
<ul>
<li><p>select标签中statementType=“CALLABLE”</p>
</li>
<li><p>标签体中调用语法：{call procedure_name(#{param1_info},#{param2_info})}</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfngl1c895j30ol066gn3.jpg" alt=""></p>
</li>
</ul>
</li>
</ul>
<h2 id="6-自定义TypeHandler处理枚举"><a href="#6-自定义TypeHandler处理枚举" class="headerlink" title="6.自定义TypeHandler处理枚举"></a>6.自定义TypeHandler处理枚举</h2><ul>
<li>我们可以通过自定义TypeHandler的形式来在设置参数或者取出结果集的时候自定义参数封装策略</li>
<li>步骤<ul>
<li>实现TypeHandler接口或者继承BaseTypeHandler</li>
<li>使用@MappedTypes定义处理的java类型</li>
<li>使用@MappedJdbcTypes定义jdbcType类型</li>
<li>在自定义结果集标签或者参数处理的时候声明使用自定义TypeHandler进行处理，或者在全局配置TypeHandler要处理的javaType</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlserver数据库还原单表数据操作</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<p>在系统数据和数据库数据备份或者升级的时候，我们总是全量的备份应用或者数据。在升级完成使用一段时间后突然间发现某张表的数据有问题，此时在全部的还原数据库的数据则不太合理，那如何只还原出现问题的这张表的数据呢？</p>
<p>首先，我们需要将升级时全量备份的数据库还原成一个新的数据库，如何还原一个新的数据库，此处不在赘述，网上有好多。自我感觉还是参考<a href="https://docs.microsoft.com/zh-cn/sql/relational-databases/backup-restore/restore-a-database-to-a-new-location-sql-server?view=sql-server-ver15" target="_blank" rel="noopener">sqlserver官方的还原说明</a>或者参考<a href="https://www.jianshu.com/p/a153c20a577d?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation" target="_blank" rel="noopener">SQL Server从BAK文件还原到新数据库</a></p>
<p>之后，我们选择刚刚还原完成的数据库使用如下的命令将ecology.dbo.hrmresource 所有的数据导入到demo.dbo.hrmresource_Test中<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gesxhysb3zj31hx0u0n7s.jpg" alt=""></p>
<p>选中刚刚还原的数据库，执行如下的sql语句，执行完成后刷新可以看到demo中已经出现了需要还原的表单数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> * <span class="keyword">into</span> demo.dbo.hrmresource_test <span class="keyword">From</span> ecology.dbo.hrmresource</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gesxkucf1wj319e0u0x5l.jpg" alt=""></p>
<p>两张表单对比,我这里的表单中没有数据，但是可以看到需要还原的demo库中对应的表单结构已经有了</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gesxp4rmjgj318s0u01kx.jpg" alt="ecology"></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gesxr7mbkxj31670u01kx.jpg" alt="demo库"></p>
<p>最后，我们使用下列命令将原来的表进行删除，并把HtmlLabelInfo_Test 重命名为HtmlLabelInfo</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//删除原有的表单,此处我的里边没有对用的表单,就没有执行这一步</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [dbo].[Hrmresource]</span><br><span class="line">//表单重命名,或者在ssms操作工具中直接在actionsetting_test上摁下F2进行表单重命名</span><br><span class="line">EXEC sp_rename <span class="string">'Hrmresource_test'</span>,<span class="string">'Hrmresource'</span></span><br></pre></td></tr></table></figure>

<p>或者是在navicat中可以直接右键选择重命名，对表单的名称进行更改</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gesxs79m9wj30w20u07wh.jpg" alt=""></p>
<p>至此,在全量备份的情况下即可还原某一张表的数据。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sqlserver</tag>
      </tags>
  </entry>
  <entry>
    <title>macbookpro使用技巧</title>
    <url>/posts/2366fd10.html</url>
    <content><![CDATA[<h2 id="1-mac的隐藏功能"><a href="#1-mac的隐藏功能" class="headerlink" title="1.mac的隐藏功能"></a>1.mac的隐藏功能</h2><ul>
<li><p>直观听到音量的渐变声音: shfit+音量键</p>
</li>
<li><p>声音或者亮度1/4的变化：shfit+option+音量键/亮度建</p>
</li>
<li><p>聊天打字快速调出emoj动画：command+control+空格</p>
</li>
<li><p>切换显示已关闭或者最小化的窗口：command+tab同时摁下option</p>
</li>
<li><p>隐藏当前窗口的程序：command+H</p>
<ul>
<li>区分关闭和隐藏的代码(开启后隐藏的图标呈现半透明状态)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.Dock showhidden -bool TRUE; killall Dock</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭的代码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.Dock showhidden -bool FALSE; killall Dock</span><br></pre></td></tr></table></figure>
</li>
<li><p>command+tab选中图标后摁下Q是关闭程序</p>
</li>
</ul>
<h2 id="2-mac中常用软件"><a href="#2-mac中常用软件" class="headerlink" title="2. mac中常用软件"></a>2. mac中常用软件</h2><h2 id="3-mac的高效使用"><a href="#3-mac的高效使用" class="headerlink" title="3.mac的高效使用"></a>3.mac的高效使用</h2><ul>
<li><p>一位数密码：pwpolicy -clearaccountpolicies  需要在终端执行此命令</p>
</li>
<li><p>更改搜索这台mac为搜索此文件夹</p>
<p>访达—偏好设置—高级—执行搜索选择搜索但前文件夹</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get21swmawj30la0m8gw3.jpg" style="zoom:50%;" />

<img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get22t0o27j30lg0leqau.jpg" style="zoom:50%;" />
</li>
<li><p>打开程序的偏好设置： command+,</p>
</li>
<li><p>手动添加打开系统偏好设置的快捷键</p>
<p>系统偏好设置—键盘—快捷键—APP快捷键—点击“+”，应用程序选择所有应用程序，菜单标题改为“系统偏好设置…”,快捷键中输入自己熟悉的快捷键就OK—点击添加</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get2c3wzzdj30ue0ns4ca.jpg" alt=""></p>
<ul>
<li>全局开启访达<ol>
<li>打开自动操作</li>
</ol>
</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get2lrvz89j31xk0kk7nk.jpg" alt=""></p>
<ol start="2">
<li>点击新建文稿</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get2ny6jayj31as0pkn9h.jpg" alt=""></p>
<ol start="2">
<li>快速操作</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get2old69wj31jm0u0kjl.jpg" alt=""></p>
<ol start="3">
<li>点击实用工具，将开启应用程序拖拽到右边</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get2r1n9e8j31jo0m01bx.jpg" alt=""></p>
<ol start="4">
<li><p>工作流程收到选择：没有输入</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get2swslhhj31io0ca46c.jpg" alt=""></p>
</li>
<li><p>选择新建变量—系统—资源库—coreservices—访达</p>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get2wqu7o0j316y0u0qv5.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get31lzelkj318w0p2as3.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get32azve5j30z40cq46w.jpg" alt=""></p>
</li>
</ul>
<ol start="6">
<li><p>点击这里可以测试是否配置正确，然后存储</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get33dggnij31js0k6nfj.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get35y97f7j319q0mm1kx.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get36sw1rjj317m0e0tkl.jpg" alt=""></p>
</li>
<li><p>快捷键定义</p>
<p>通过系统偏好设置—键盘—快捷键—服务—通用—全局开启访达</p>
<p>![image-20200515135133428](/Users/wangyufei/Library/Application Support/typora-user-images/image-20200515135133428.png)</p>
</li>
<li><p>在全局开启访达后边点击设置快捷键，我这里设置的是command+option+空格</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1get3gr7xbaj30k20f8tc5.jpg" alt=""></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>网络在在线传输工具 --- 奶牛快传</title>
    <url>/posts/994d00c4.html</url>
    <content><![CDATA[<h2 id="1-奶牛快传"><a href="#1-奶牛快传" class="headerlink" title="1.奶牛快传"></a>1.<a href="https://cowtransfer.com/" target="_blank" rel="noopener">奶牛快传</a></h2><h3 id="1-1-免费超快的传文件工具"><a href="#1-1-免费超快的传文件工具" class="headerlink" title="1.1 免费超快的传文件工具"></a>1.1 免费超快的传文件工具</h3><p>奶牛快传是一款免费、无需注册即可直接使用的网页端大文件临时传输网盘服务。它提供了网页版、微信小程序、IOS以及安卓端。无论是办公文档、照片、还是电影视频通通都能轻松分享。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gerseagq8pj31q10u0hdt.jpg" alt=""></p>
<p>未注册用户则可最大传输 2GB 文件,默认保留7天，可以免费下载100次。支持加密、邮件和短信分享</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gerskqbjt2j31uf0u0u0x.jpg" alt=""></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gersldpc6tj31vn0u0u0x.jpg" alt=""></p>
<h3 id="1-2-奶牛快传的使用"><a href="#1-2-奶牛快传的使用" class="headerlink" title="1.2 奶牛快传的使用"></a>1.2 奶牛快传的使用</h3><p>你只需在任何浏览器打开<a href="https://cowtransfer.com/" target="_blank" rel="noopener">奶牛快传</a>的网站，通过点击上传按钮或拖放文件即可开始上传，支持一次批量上传多个文件。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gerseagq8pj31q10u0hdt.jpg" alt=""></p>
<p>之后你就能获得文件的共享链接了。你只需将链接发给别人，对方就能直接通过浏览器下载了，对方并不需要注册登录，也无需下载 APP 等麻烦操作，实用性很强。同时，奶牛快传还提供了共享网址所对应的二维码以及微信小程序二维码，这样不管用手机还是电脑来下载文件都更方便。起码自己用电脑给手机发文件的场景也是经常会用到的。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gersrgbg0gj31un0u01ky.jpg" alt=""></p>
<h3 id="1-3-奶牛快传注册账户"><a href="#1-3-奶牛快传注册账户" class="headerlink" title="1.3 奶牛快传注册账户"></a>1.3 奶牛快传注册账户</h3><p>还未体验过注册账户，待体验后在进行分享…..</p>
]]></content>
      <categories>
        <category>网络在在线传输工具</category>
      </categories>
      <tags>
        <tag>奶牛快传</tag>
        <tag>文件传输</tag>
        <tag>网络在在线传输工具</tag>
      </tags>
  </entry>
  <entry>
    <title>学习计划</title>
    <url>/posts/5e21c553.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="0e611ee74b06e2ddcd2ee7407488994f5be187a4e5b6ca2b058b0d3fd51799d1">06e33fa5ddf164f34ce0264451a527e7fc8f6fa8a95f67dfcf2a5ce00d299cef3be11578d61afc0a1143593a070e641fc8427ca913c7c0afa9f6696aca297d2f290fd277097516f8f03fd758e92408c40ee4b130c84d04b293e24648b34236310bf4d11031f395addd20d571542162096bf00493306fff9743be9c075e5dd53b07f5a50c46bc0d5f66321ed59108d27e1fc47e3de5254da8b21c517be3a80f55f58db45616888999f424c5b26d64f22514e95fe8f1573544052b4e73386eb6e7cd5f09a5499795db324d26072ef830d74eae06df099a533eece8ad0e7e3e26e1ae932f258db35c630126f98bf749c9f5e95c60fa8a3e23fd470de78c2a042d917562c75ea24e401769b6531db8af7b5961c798d1e85711e36a4a799222e5fde611f6679aa490406b6ec2ce5d64192343a12080055abc27e2c2705b405d0fceea5e9f802df96431e28472e124a6145805827ea7f82628a6230265b0249ecd28b8b9e9ff726c01dd6a679beddd606b86df75a4c414455e86b49595f6318af254a3596e77cd110910737af45f4ef1c9cdc33cb972f3a89f4c715b5bca9418755e36d6e836d0bf975a48d8a32a838bd89944b42e2d2b157f13235998fe7202f03a7986c88da4259b4a0837f3b4cf2bf696250a303d75a1772dc8651682e67eaca5846a9a05b50a5fd1ee0de221a111c576a0cb5483fd5425415b9c52279c1342ff7cf7ce37d54b37a48cd83d9a31ac15613f0bd11dcd76d2b939f1290ccad6f38f99e94025ec8bc8384667120f36e0de9dfe205460b698d576a219c4955fdf8339a60a97b0a32724c3891ef13662732ad1c93fc38ede634ad592fa6246fd31f8ed398ef892a4f12f577e9899a9b85a00b1b1f70bf2b6b95133eaff6ddcc4cd5d18dea2cd1c609508ba941aa9fb0186abdfc13ac7f20c2a2ba2ebc9aea96a1ffac0c588a103696fa20468d56533ee67f60d80b05c567fef50651cd9abaf6863f0fa8498778b6259df52f549f0f1f13d5a29252c95676ef5db0f2833d76e0f1af8fe24206996ba1e74694a24a24941d52751b52b631eef80bd80e792172a9f589037c592c7966e20a282fad25e82777c7a6513657efb992e498a563b6a65ebd092536781a0db7cd7b8776d977072f36de125f787d421afd7798a9590b7a390d9cfbed5b7d2153698ca2060f37d671bd60abd5d3c8d07662e9f6acdd391d13c58a84e8c059e0e1bc323b55119e1dc2e7144d0eb37317501d4c48596d4b84528170a023f050c314c150f804ac5b09a5bbd8cade99f6b52f69afcd214773e041a7cbe42f07c9d1045dc1777a712698349540c582ab59378d541efdc7ba14d025d1d0e3cec46258985bdef63eac77104883a10d2ae7af07a5aacc43cadc0981243afad9ca57c456bc6fe1edff0e6fa15955f7026fe5a3cede255541a471d31fca97fed41a5</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title>油猴(Tampermonkey)常用脚本</title>
    <url>/posts/44e1e43b.html</url>
    <content><![CDATA[<h2 id="1-什么是油猴"><a href="#1-什么是油猴" class="headerlink" title="1.什么是油猴"></a>1.什么是油猴</h2><p>从英文翻译而来-Tampermonkey是一个捐赠软件用户脚本管理器，可用作浏览器扩展。该软件使用户能够添加和使用用户脚本，这些脚本是可用于修改网页的JavaScript程序</p>
<h2 id="2-油猴下载地址"><a href="#2-油猴下载地址" class="headerlink" title="2.油猴下载地址"></a>2.油猴下载地址</h2><ul>
<li><a href="https://www.tampermonkey.net/" target="_blank" rel="noopener">官网下载</a></li>
<li><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">谷歌商店</a><h2 id="3-常用插件"><a href="#3-常用插件" class="headerlink" title="3.常用插件"></a>3.常用插件</h2><h3 id="3-1-批量下载网页图片-Picviewer-CE"><a href="#3-1-批量下载网页图片-Picviewer-CE" class="headerlink" title="3.1 批量下载网页图片 - Picviewer CE+"></a>3.1 批量下载网页图片 - Picviewer CE+</h3><a href="https://greasyfork.org/zh-CN/scripts/24204-picviewer-ce" target="_blank" rel="noopener">Picviewer CE+</a> 是一款浏览器油猴脚本，可以将包含很多图片的网页变成图片浏览器，还能对图片进行翻转、旋转、放大，显示原始大图、收藏、批量保存，聚合所有分页大图，图片在线编辑等操作</li>
</ul>
]]></content>
      <tags>
        <tag>油猴</tag>
        <tag>Tampermonkey</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌云盘折腾记</title>
    <url>/posts/af6fa0b3.html</url>
    <content><![CDATA[<h2 id="折腾原因"><a href="#折腾原因" class="headerlink" title="折腾原因"></a>折腾原因</h2><p>前段时间由于某些原因，Goindex基于rclone挂载的谷歌云盘在某些原因的情况下不能免科学上网进行访问。这对于我这个大量文件都存放在谷歌云盘上的人来说就有点难受了。毕竟咱是一个无产阶级没有那么多的money进行购买机场流量。只能在茫茫的查找对应的替代品，功夫不负有心人。最终在努力下终于找到一个解决的办法，故此在这里记录一下</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul>
<li>能科学上网的环境(准备的情况下需要科学上网)</li>
<li><a href="https://rclone.org/downloads/" target="_blank" rel="noopener">rclone</a>  <strong>下载安装rclone</strong></li>
<li><a href="https://www.cloudflare.com/" target="_blank" rel="noopener">CLOUDFLARE</a> <strong>提前注册好账号</strong></li>
<li><a href="https://install.gd.workers.dev/" target="_blank" rel="noopener">Goindex</a> <strong>现在已经不能用了，原先我就是用的这个</strong></li>
</ul>
<h2 id="安装免科学上网访问谷歌云盘"><a href="#安装免科学上网访问谷歌云盘" class="headerlink" title="安装免科学上网访问谷歌云盘"></a>安装免科学上网访问谷歌云盘</h2><p>我是在参考YouTube上大佬小小白的视频进行操作的，这里附上大佬的<a href="https://www.youtube.com/watch?v=oPcb1FZXu5o" target="_blank" rel="noopener">视频链接</a>。各位看官，可以先参考这位大佬的视频进行操作。如果顺利的话就能正常的免科学上网的访问自己的谷歌云盘了。但是，我偏偏是这个不幸中的一人。我按照视频的操作过程中，总是卡在获取谷歌云盘的token验证失败的情况，查了很多资料都没能解决此问题。如果你也遇到这样的问题话，可以参考我的做法。<br>首先，<strong><em>你原先在GoIndex上生成过对应的代码，并且在cloudflare上部署过</em></strong>，下图是我部署代码的部分截图<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gevadnpk2xj31o20jetce.jpg" alt=""><br>其次，需要在cloudflare上新建一个worked，将<a href="https://github.com/yanzai/goindex" target="_blank" rel="noopener">这里</a>index.js的代码复制到刚刚新建的worked中，并且将下图中的ID、密钥和token替换成原先使用Goindex生成的代码中的ID、密钥和token。(<strong><em>这里之所以是这样做，是因为使用rclone生成token的时候总是报错</em></strong>)<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gevahdci01j31je0u0k1z.jpg" alt=""><br>最后，保存并部署代码就OK了，这样就能再次在不科学上网的情况下继续浏览自己谷歌云盘中的内容了。<br>在这次更新的代码中还有很多的改进，比如可以对不同的文件夹赋予不同的权限，能在进行搜索操作</p>
<h2 id="GDIndex代码生成器"><a href="#GDIndex代码生成器" class="headerlink" title="GDIndex代码生成器"></a>GDIndex代码生成器</h2><p>虽然GoIndex代码生成器目前已经不能使用了，但是现在有一个新的GDIndex代码生成器可以替代GoIndex的代码生成器<br><a href="https://gdindex-code-builder.glitch.me/" target="_blank" rel="noopener">GDIndex</a>的使用方法同GoIndex。需要的小伙伴可以自行百度设置，或者参考上面提到的视频。</p>
<p><strong><em>文章参考：</em></strong></p>
<ol>
<li><a href="https://www.youtube.com/watch?v=oPcb1FZXu5o" target="_blank" rel="noopener">小小白大佬的视频</a></li>
<li><a href="https://xiaoxiaobai.ga/?p=256" target="_blank" rel="noopener">小小白大佬的文档说明</a></li>
</ol>
]]></content>
      <categories>
        <category>google</category>
      </categories>
      <tags>
        <tag>google diriver</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌浏览器调试技巧</title>
    <url>/posts/4cc93b7c.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>google</category>
      </categories>
      <tags>
        <tag>调试</tag>
      </tags>
  </entry>
</search>
